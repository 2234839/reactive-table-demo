{"version":3,"file":"vue.composition.api.d9b52cd0.js","sources":["../../src/components/promise-loading/lib/vue.composition.api.ts"],"sourcesContent":["/** ════════════════════════🏳‍🌈 实用功能 🏳‍🌈════════════════════════\n *  利用 composition-api 实现的一些实用功能\n ** ════════════════════════🚧 实用功能 🚧════════════════════════ */\nimport {\n  customRef,\n  nextTick,\n  watch,\n  watchEffect,\n  WatchSource\n} from \"vue\";\n\nclass PromiseObj<T, Err = Error> {\n  pending = true;\n  fulfilled = false;\n  rejected = false;\n  data = {} as T;\n  error = {} as Err;\n  private p = Promise.resolve() as Promise<unknown>;\n  setP(p: Promise<unknown>) {\n    this.p = p;\n  }\n  equalP(p: Promise<unknown>) {\n    return this.p === p;\n  }\n}\n\ninterface usePromiseComputedOptions<T> {\n  /** 函数内的依赖变更的时候就重新计算，在里面包含请求的时候最好指定依赖，因为请求会改变 packet_token，而它属于响应式数据会被依赖  */\n  deps?: WatchSource<any>;\n  getter: () => Promise<T>;\n  /** 处理数据是否要和之前的数据进行合并 */\n  dataMergeFun?: (oldData: T, newData: T) => T;\n  /** data 的默认值 */\n  defaultData?: T;\n}\nexport function usePromiseComputed<T, Err = Error>({\n  deps,\n  getter,\n  dataMergeFun = (oldData, newData) => newData,\n  defaultData,\n}: usePromiseComputedOptions<T>){\n  const r = new PromiseObj<T, Err>();\n  if (defaultData !== undefined) {\n    r.data = defaultData;\n  }\n  return customRef<PromiseObj<T, Err>>((track, trigger) => {\n    if (!deps) {\n      watchEffect(() => update(getter()));\n    } else if (deps) {\n      watch(deps, () => update(getter()), { immediate: true });\n    }\n    function update(p: Promise<T>) {\n      r.setP(p);\n      r.pending = true;\n      r.fulfilled = false;\n      r.rejected = false;\n\n      // 立即触发会导致死循环，所以包裹一层\n      nextTick(trigger);\n      p.then((res) => {\n        // 避免 「求值fun」 第一次执行产生的 promise 比 第二次产生的后结束 导致 数据错误的采用了第一次的\n        if (r.equalP(p)) {\n          r.pending = false;\n          r.fulfilled = true;\n          r.data = dataMergeFun(r.data, res);\n        }\n      })\n        .catch((e) => {\n          if (r.equalP(p)) {\n            r.pending = false;\n            r.rejected = true;\n            r.error = e;\n          }\n        })\n        .finally(() => {\n          if (r.equalP(p)) {\n            trigger();\n          }\n        });\n    }\n\n    return {\n      get() {\n        track();\n        return r;\n      },\n      set(newValue) {\n        console.warn(\"不可设置值\");\n      },\n    };\n  });\n}\n\n/** 防抖的 ref */\nexport function useDebouncedRef<T>(value: T, delay = 200) {\n  let timeout = 0;\n  return customRef<T>((track, trigger) => {\n    return {\n      get() {\n        track();\n        return value;\n      },\n      set(newValue) {\n        clearTimeout(timeout);\n        timeout = (setTimeout(() => {\n          value = newValue;\n          trigger();\n        }, delay) as unknown) as number;\n      },\n    };\n  });\n}"],"names":["[object Object]","Promise","resolve","p","this","deps","getter","dataMergeFun","oldData","newData","defaultData","r","PromiseObj","data","customRef","track","trigger","setP","pending","fulfilled","rejected","then","res","equalP","catch","e","error","finally","update","immediate","get","newValue","warn"],"mappings":"wDAWA,QAAAA,4BACY,kBACE,iBACD,YACJ,cACC,UACIC,QAAQC,UACpBF,KAAKG,QACEA,EAAIA,EAEXH,OAAOG,UACEC,KAAKD,IAAMA,eAa6BE,KACjDA,SACAC,eACAC,EAAe,EAACC,EAASC,IAAYA,eACrCC,UAEMC,EAAI,IAAIC,cACM,IAAhBF,MACAG,KAAOH,GAEJI,GAA8B,CAACC,EAAOC,gBAM3Bb,KACZc,KAAKd,KACLe,SAAU,IACVC,WAAY,IACZC,UAAW,IAGJJ,KACPK,MAAMC,IAEFX,EAAEY,OAAOpB,OACTe,SAAU,IACVC,WAAY,IACZN,KAAON,EAAaI,EAAEE,KAAMS,OAG/BE,OAAOC,IACFd,EAAEY,OAAOpB,OACTe,SAAU,IACVE,UAAW,IACXM,MAAQD,MAGbE,SAAQ,KACHhB,EAAEY,OAAOpB,kBA7BdE,EAEMA,KACHA,GAAM,IAAMuB,EAAOtB,MAAW,CAAEuB,WAAW,OAFrC,IAAMD,EAAOtB,OAkCpB,CACLwB,aAESnB,GAETX,IAAI+B,WACMC,KAAK"}